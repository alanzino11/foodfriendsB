{"version":3,"sources":["images/image.png","images/imageSquare.png","components/Pill.js","components/profile/Profile.js","components/profile/SimilarProfile.js","Explore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PillComp","styled","div","Pill","props","style","color","paddingTop","fontWeight","data","Profile","profile","setDropdownIndex","useState","isFollowing","setFollowing","icon","setIcon","showSimilarProfiles","setShowSimilarProfiles","isEditing","setEditing","diet","setDiet","popoverOpen","setPopoverOpen","editDiet","newDiet","className","Button","onClick","variantColor","src","image","alt","name","Popover","usePortal","isOpen","IconButton","size","city","priceRange","places","foods","aria-label","height","index","SimilarProfile","Flex","align","Explore","jsonprofiles","profiles","setProfiles","isLoading","setLoading","clickedIndex","setClickedIndex","console","log","Stack","spacing","Heading","as","Menu","closeOnSelect","rightIcon","border","minWidth","MenuOption","title","type","value","setTimeout","veganprofiles","Checkbox","defaultIsChecked","paddingLeft","Spinner","thickness","speed","emptyColor","wrap","justify","map","p","paddingBottom","similarprofiles","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae7a9ad0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.312ca80c.png\";","module.exports = __webpack_public_path__ + \"static/media/imageSquare.ca832a71.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst PillComp = styled.div`\n    border-radius: 15px;\n    background-color: #95c595;\n    height: 30px;\n    width: 120px;\n    text-align: center;\n    align-items: center;\n`;\n\nconst Pill = (props) => {\n    return (\n        <PillComp>\n            <div style={{ color: 'white', paddingTop: '5px', fontWeight: 'bold' }}>{props.data}</div>\n        </PillComp>\n    )\n}\n\nexport default Pill;","import React, {useState} from 'react';\nimport { \n    IconButton,\n    Button,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuOptionGroup,\n    MenuItemOption,\n    Popover,\n    PopoverTrigger,\n    PopoverContent,\n    PopoverHeader,\n    PopoverBody,\n    PopoverFooter,\n    PopoverArrow,\n    PopoverCloseButton,\n} from \"@chakra-ui/core\";\n\nimport './Profile.css';\nimport image from '../../images/image.png';\nimport Pill from '../Pill'\n\nconst Profile = ({profile, setDropdownIndex}) => {\n    const [isFollowing, setFollowing] = useState(\"Follow\");\n    const [icon, setIcon] = useState(\"triangle-down\");\n    const [showSimilarProfiles, setShowSimilarProfiles] = useState(false);\n    const [isEditing, setEditing] = useState(false);\n    const [diet, setDiet] = useState(profile.diet);\n    const [popoverOpen, setPopoverOpen] = useState(false)\n\n    const dropdown = () => {\n        icon === \"triangle-down\" ? setIcon(\"triangle-up\") : setIcon(\"triangle-down\");\n        setShowSimilarProfiles(!showSimilarProfiles);\n        showSimilarProfiles ? setDropdownIndex(-1) : setDropdownIndex(profile.index);\n    }\n\n    const editDiet = (newDiet) => {\n        setDiet(newDiet)\n        setPopoverOpen(!popoverOpen)\n    }\n\n    return (\n        <div className=\"profile\">\n            <div className=\"content\">\n                <div className=\"edit\">\n                    <Button \n                        onClick={() => setEditing(!isEditing)}\n                        variantColor={isEditing ? \"red\": \"gray\"}\n                    >\n                        {isEditing ? \"Save Edit\" : \"Edit\"}\n                    </Button>\n                </div>\n                <div className=\"image\">\n                    <img src={image} alt=\"\"/>\n                </div>\n                <div className=\"info\">\n                    <span className=\"name\"><b>{profile.name}</b></span>\n                </div>\n                <div className=\"dietpills\">\n                    <div className=\"pill\"><Pill data={diet}/></div>\n                    {\n                        isEditing ?\n                        ( <Popover usePortal isOpen={popoverOpen}>\n                            <PopoverTrigger>\n                                <IconButton size=\"sm\" icon=\"edit\" onClick={() => setPopoverOpen(true)}/>\n                            </PopoverTrigger>\n                            <PopoverContent>\n                                <PopoverArrow />\n                                <PopoverHeader>Choose a new diet.</PopoverHeader>\n                                <PopoverCloseButton />\n                                <PopoverBody>\n                                    <Button variantColor=\"white\" onClick={() => editDiet(\"vegan\")}><Pill data=\"vegan\"/></Button>\n                                    <Button variantColor=\"white\" onClick={() => editDiet(\"keto\")}><Pill data=\"keto\"/></Button>\n                                    <Button variantColor=\"white\" onClick={() => editDiet(\"gluten-free\")}><Pill data=\"gluten-free\"/></Button>\n                                    <Button variantColor=\"white\" onClick={() => editDiet(\"vegetarian\")}><Pill data=\"vegetarian\"/></Button>\n                                </PopoverBody>\n                            </PopoverContent>\n                        </Popover> ) : null\n                    }\n\n                    {/* <Menu>\n                        <MenuButton as={Button} rightIcon=\"chevron-down\" border=\"1px solid grey\">\n                        Diet\n                        </MenuButton>\n                        <MenuList minWidth=\"240px\">\n                        <MenuOptionGroup title=\"Diet\" type=\"checkbox\">\n                            <MenuItemOption value=\"vegan\">Vegan</MenuItemOption>\n                            <MenuItemOption value=\"keto\">Keto</MenuItemOption>\n                            <MenuItemOption value=\"gluten-free\">Gluten-Free</MenuItemOption>\n                        </MenuOptionGroup>\n                        </MenuList>\n                    </Menu> */}\n                </div>\n                <div className=\"info\">\n                    <b>{profile.city}, FL</b> &nbsp; | &nbsp; <b>{profile.priceRange}</b>\n                </div>\n                <div className=\"info\">\n                    <b>Favorite Restaurants:</b> &nbsp; {profile.places[0]}, {profile.places[1]}\n                </div>\n                <div className=\"info\">\n                    <b>Favorite Foods:</b> &nbsp; {profile.foods[0]}, {profile.foods[1]}\n                </div>\n                <div className=\"buttons\">\n                    <div className=\"image\"><button className=\"followbutton\" onClick={() => setFollowing(\"Following\")}>{isFollowing}</button></div>\n                    <IconButton \n                      variantColor=\"teal\"\n                      aria-label=\"Call Segun\"\n                      size=\"lg\"\n                      icon={icon}\n                      height={10}\n                      onClick={dropdown}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport { Flex } from \"@chakra-ui/core\";\nimport { FaChevronRight } from 'react-icons/fa';\n\nimport image from '../../images/imageSquare.png';\nimport Pill from '../Pill'\n\nconst SimilarProfile = ({ profile }) => {\n  return (\n    <Flex align=\"center\" className=\"similar-profile\">\n        <img src={image} alt=\"\" className=\"small-image\"/>\n        <span className=\"similar-profile-item\">{profile.name}</span>\n        <span className=\"similar-profile-item\"><Pill data={profile.diet}/></span>\n        <span className=\"similar-profile-icon\"><FaChevronRight size={30}/></span>\n    </Flex>\n  )\n}\n\nexport default SimilarProfile;","import React, { useState } from 'react';\nimport { \n  Heading,\n  Stack,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuOptionGroup,\n  MenuItemOption,\n  Button,\n  Checkbox, \n  Flex,\n  Spinner,\n} from \"@chakra-ui/core\";\nimport { FaFilter } from 'react-icons/fa';\n\nimport jsonprofiles from './profiles.json';\nimport veganprofiles from './vegans.json';\nimport similarprofiles from './similarprofiles.json'\nimport './App.css'\nimport Profile from './components/profile/Profile';\nimport SimilarProfile from './components/profile/SimilarProfile.js';\n\nconst Explore = () => {\n  const [profiles, setProfiles] = useState(jsonprofiles)\n  const [isLoading, setLoading] = useState(false);\n  const [clickedIndex, setClickedIndex] = useState(-1);\n\n  console.log(profiles)\n\n  const filter = () => {\n    setLoading(true);\n    setTimeout(() => setLoading(false), 500)\n    setProfiles(veganprofiles)\n  }\n\n  const setDropdownIndex = (index) => {\n    setClickedIndex(index)\n  }\n\n  return (\n      <div className=\"explorepage\">\n        <Stack spacing={3}>\n            <Heading as=\"h1\" size=\"2xl\">Food Friends</Heading>\n            <Heading as=\"h2\" size=\"xl\">Explore</Heading>\n        </Stack>\n        <Flex align=\"center\">\n          <div className=\"filter-icon\">\n            <FaFilter size={20}/>\n          </div>\n          <div className=\"dietbutton\">\n          <Menu closeOnSelect={false}>\n            <MenuButton as={Button} rightIcon=\"chevron-down\" border=\"1px solid grey\">\n              Diet\n            </MenuButton>\n            <MenuList minWidth=\"240px\">\n              <MenuOptionGroup title=\"Diet\" type=\"checkbox\">\n                <MenuItemOption value=\"vegan\">Vegan</MenuItemOption>\n                <MenuItemOption value=\"keto\">Keto</MenuItemOption>\n                <MenuItemOption value=\"gluten-free\">Gluten-Free</MenuItemOption>\n              </MenuOptionGroup>\n              <Button variantColor=\"blue\" onClick={filter}>Apply</Button>\n            </MenuList>\n          </Menu>\n          </div>\n          <Menu closeOnSelect={false}>\n            <MenuButton as={Button} rightIcon=\"chevron-down\" border=\"1px solid grey\">\n              Price\n            </MenuButton>\n            <MenuList minWidth=\"240px\">\n              <MenuOptionGroup title=\"Price\" type=\"checkbox\">\n                <MenuItemOption value=\"$\">$</MenuItemOption>\n                <MenuItemOption value=\"$$\">$$</MenuItemOption>\n                <MenuItemOption value=\"$$$\">$$$</MenuItemOption>\n              </MenuOptionGroup>\n              <Button variantColor=\"blue\">Apply</Button>\n            </MenuList>\n          </Menu>\n          <Checkbox variantColor=\"blue\" defaultIsChecked paddingLeft={5}>\n            Only My City\n          </Checkbox>\n        </Flex>\n        {\n          isLoading ? \n            <Spinner\n              thickness=\"4px\"\n              speed=\"0.65s\"\n              emptyColor=\"gray.200\"\n              color=\"blue.500\"\n              size=\"xl\"\n            /> : (\n            <Flex wrap=\"wrap\" justify=\"space-around\">\n              {profiles.map((p, index) => {\n                return (\n                  <div style={{ paddingBottom: \"10px\" }}>\n                    <Profile profile={p} setDropdownIndex={setDropdownIndex}/>\n                    {index === clickedIndex ? (\n                      <div className=\"similar-profiles\">\n                        {similarprofiles.map(p => {\n                          return (\n                          <SimilarProfile profile={p}/>\n                        )})}\n                      </div> \n                      ) : null}\n                  </div>)\n              })}\n            </Flex>\n          )\n        }\n      </div>\n    )\n}\n\nexport default Explore;","import React from 'react';\n\nimport './App.css';\nimport Explore from './Explore';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Explore/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <CSSReset />\n      <App/>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}